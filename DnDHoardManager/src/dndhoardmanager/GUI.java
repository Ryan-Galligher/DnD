/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dndhoardmanager;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import dndminions.*;



/**
 *
 * @author Ryan
 */
public class GUI extends javax.swing.JFrame {

    
    ArrayList<Minions> list = new ArrayList<>();
    ArrayList<String> attackNotes = new ArrayList<>();
    ArrayList<Integer> numRepeatingAttackNotes = new ArrayList<>();
    File importedFile;
        
    int wizlv;
    int proficiency; 
    private final boolean dynamicallyFindClass;
    
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        this.dynamicallyFindClass = false;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        WizlvSlider = new javax.swing.JSlider();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        ProficiencySlider = new javax.swing.JSlider();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MinionList = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        AttackList = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        MonsterList = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        AddButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        SetButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        MinionNumberField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        MonsterNumberField = new javax.swing.JTextField();
        ExportButton = new javax.swing.JButton();
        ImportButton = new javax.swing.JButton();
        RollButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Wizard Level");

        WizlvSlider.setMajorTickSpacing(1);
        WizlvSlider.setMaximum(20);
        WizlvSlider.setMinimum(1);
        WizlvSlider.setPaintLabels(true);
        WizlvSlider.setPaintTicks(true);
        WizlvSlider.setSnapToTicks(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(WizlvSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WizlvSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        jLabel2.setText("Proficiency");

        ProficiencySlider.setMajorTickSpacing(1);
        ProficiencySlider.setMaximum(6);
        ProficiencySlider.setMinimum(1);
        ProficiencySlider.setPaintLabels(true);
        ProficiencySlider.setPaintTicks(true);
        ProficiencySlider.setSnapToTicks(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(ProficiencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ProficiencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        MinionList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Number", "Name", "HP", "AC", "Attacking"
            }
        ));
        jScrollPane1.setViewportView(MinionList);

        AttackList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Number", "Name", "Attack Roll", "Damage"
            }
        ));
        jScrollPane2.setViewportView(AttackList);

        jLabel4.setText("Attack Results");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(229, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("Minion List");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel3))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        MonsterList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Number", "Name", "AC?", "Hurt By"
            }
        ));
        jScrollPane3.setViewportView(MonsterList);

        jLabel5.setText("Monsters");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        AddButton.setText("Add Row");

        DeleteButton.setText("Delete Row");

        SetButton.setText("Set Attack");

        jLabel6.setText("Minion #");

        MinionNumberField.setText("0");

        jLabel7.setText("Monster #");

        MonsterNumberField.setText("0");

        ExportButton.setText("Export Data");
        ExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportButtonActionPerformed(evt);
            }
        });

        ImportButton.setText("Import Data");
        ImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportButtonActionPerformed(evt);
            }
        });

        RollButton.setText("Roll Attack");
        RollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RollButtonActionPerformed(evt);
            }
        });

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(AddButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DeleteButton))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(ExportButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ImportButton))))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(RollButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(UpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel6))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel7))
                                    .addComponent(MinionNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MonsterNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SetButton)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ImportButton)
                        .addComponent(ExportButton))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MinionNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddButton)
                    .addComponent(DeleteButton)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MonsterNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SetButton)
                    .addComponent(RollButton))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
        updateLvAndProficiency();
        try{
            importDataCSV(importedFile);
        }catch(Exception e){JOptionPane.showMessageDialog(this, e);e.printStackTrace();}
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void RollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RollButtonActionPerformed
        // TODO add your handling code here:
        rollAttack();
    }//GEN-LAST:event_RollButtonActionPerformed

    private void ExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportButtonActionPerformed
        // TODO add your handling code here:
        exportDataCSV();
    }//GEN-LAST:event_ExportButtonActionPerformed

    private void ImportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportButtonActionPerformed
        // TODO add your handling code here:
        clearAll();
        updateLvAndProficiency();
        System.out.println("Gotten into choosing the file from the computer");
        //Have data read from excel spreadsheet and put it into program
        JFileChooser jfc = new JFileChooser();
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            try
            {
                importDataCSV(jfc.getSelectedFile());
                importedFile=jfc.getSelectedFile();
                
                System.out.println("Finished Importing Data and Saving");
            } catch(Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
                //Logger.getLogger(FTCLeagueSeeder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ImportButtonActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
            
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JTable AttackList;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton ExportButton;
    private javax.swing.JButton ImportButton;
    private javax.swing.JTable MinionList;
    private javax.swing.JTextField MinionNumberField;
    private javax.swing.JTable MonsterList;
    private javax.swing.JTextField MonsterNumberField;
    private javax.swing.JSlider ProficiencySlider;
    private javax.swing.JButton RollButton;
    private javax.swing.JButton SetButton;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JSlider WizlvSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    /**
     * For each minion, simulates that minion attacking and saves the results by updating the attack table
     */
    public void rollAttack()
    {
        //Clears out all of the previous values in the AttackList and then refills out all of them
        //4 values for each attack in order: hit, damage, description, isCritical
        cleanTable(AttackList);
        String[][] attacksFromOneCreature;
        for (int i = 0; i < list.size(); i++)   //For every creature,
        {
            attacksFromOneCreature = list.get(i).attack();
            for (String[] attacksFromOneCreature1 : attacksFromOneCreature) //For every attack each creature made
            {
                String[] info = {list.get(i).name, attacksFromOneCreature1[0], attacksFromOneCreature1[1]};
                if (!attackNotes.contains(attacksFromOneCreature1[3])) {
                    attackNotes.add(attacksFromOneCreature1[3]);
                    numRepeatingAttackNotes.add(1);
                } else {
                    int index = attackNotes.indexOf(attacksFromOneCreature1[3]);
                    numRepeatingAttackNotes.add(index, numRepeatingAttackNotes.remove(index)+1);
                }
                updateAttackTableRow(info, Boolean.parseBoolean(attacksFromOneCreature1[3]));
            }
        }
    }
    
    public void dealDamage()
    {
        //Have damage delt to creature, and if dead removes it from list##########################################################################################
    }
    /**
     * Reads the different rows from a CSV spreadsheet and calls other methods to import the Minion
     * @param theFile 
     */
    public void importDataCSV(File theFile)
    {
        System.out.println("    Into ImportData method");
        Scanner hello;
        try{
            hello = new Scanner(theFile);
            System.out.println("    Able to successfully set a scanner to the file to start reading it");
            System.out.println("    " + theFile);
        } catch (FileNotFoundException e)
        {
            //Logger.getLogger(MainWindow.class.getName()).log(level.SEVERR, null, exec);
            //e.printStackTrace();
            System.out.println("ERROR: " + e.toString());
            return;
        }
        
        String[] me;
        int spot = 0;
        //for every line in the file, collect data and place it where it is needed
        while (hello.hasNextLine())
        {
            try{
                spot++;
                me = hello.nextLine().split(",");
                System.out.println("        At the place in the spreadsheet " + spot + " has the name " + me);
                //read in each value on the line and create a row
                parseImportedData(me);
            }catch(ClassNotFoundException|InstantiationException|IllegalAccessException e){JOptionPane.showMessageDialog(this, e);e.printStackTrace(); break;}
        }
        System.out.println("    Finished reading all lines in the File");
        
        try{System.out.println(hello.nextLine());}catch(Exception e){System.out.println("There is indeed no other after right now.");}
    }
    /**
     * Exports the Minion information into a CSV spreadsheet. NOT COMPLETE.
     */
    public void exportDataCSV()
    {
        //Have data in program override the spreadsheet. DOES NOT save the health of creatures
        JFileChooser jfc = new JFileChooser();
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            try {
                importedFile = jfc.getSelectedFile();
                FileOutputStream fos = new FileOutputStream(importedFile);
                try (ObjectOutputStream oos = new ObjectOutputStream(fos))
                {
                   //CHANGE SO CAN WRITE BACK INTO EXCEL SPREADSHEET######################################################################
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
                //Logger.getLogger(FTCLeagueSeeder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    /**
     * Adds in the information about a Minion given through stuff into the Minion Table.
     * @param stuff 
     */
    public void updateMinionTableRow(String[] stuff)
    {
        System.out.println("            updating the Minon Table");
        int i;
        //Adds in info from array and adds it to Minion Table
        for (i = 0; i < MinionList.getModel().getRowCount(); i++)
        {
            if(MinionList.getModel().getValueAt(i, 0).equals(""))
            {
               break; 
            }
        }
        if(i < MinionList.getModel().getRowCount())
        {
            System.out.println("            Existing row");
            MinionList.getModel().setValueAt(i+1 , i, 0);
            for (int a = 0; a < MinionList.getModel().getColumnCount()-1; a++)
            {
                MinionList.getModel().setValueAt(stuff[a], i, a+1);
            }
        }
        else
        {
            System.out.println("            New row");
            DefaultTableModel model = (DefaultTableModel) MinionList.getModel();
            model.addRow(new Object[]{i+1,stuff[0],stuff[1],stuff[2],stuff[3]});
        }
    }
    
    /**
     * This Method goes and adds the values in stuff and puts it into the Attack Table, putting it in the next open one or creates another row and adds the values to that row
     * @param stuff 
     * @param isCritical 
     */
    public void updateAttackTableRow(String[] stuff, boolean isCritical)
    {
        int i;
        //Adds in info from array and adds it to Minion Table
        for (i = 0; i < AttackList.getModel().getRowCount(); i++)
        {
            if(AttackList.getModel().getValueAt(i, 0).equals(""))
            {
               break; 
            }
        }
        if(i < AttackList.getModel().getRowCount())
        {
            AttackList.getModel().setValueAt(i , i, 0);
            for (int a = 0; a < AttackList.getModel().getColumnCount()-1; a++)
            {
                AttackList.getModel().setValueAt(stuff[a], i, a+1);
            }
        }
        else
        {
            DefaultTableModel model = (DefaultTableModel) AttackList.getModel();
            model.addRow(new Object[]{i,stuff[0],stuff[1],stuff[2]});
        }
    }
    /**
     * Clears resets all of the values to empty Strings in the given Table
     * @param Table_jTable 
     */
    public void cleanTable(JTable Table_jTable)
    {
        int rows = Table_jTable.getModel().getRowCount();   //clears the table so there are no leftover broken stuff
        int colums = Table_jTable.getModel().getColumnCount();
        for (int c = 0; c < colums; c++)
        {
            for (int r = 0; r < rows; r++)
            {
                Table_jTable.getModel().setValueAt("" , r, c);
            }
        }
    }
    /**
     * Takes the name of a Class of Minion and returns a new instance of it.
     * @param className The String of the name of the Minion
     * @return A new instance of the requested Minion
     * @throws ClassNotFoundException
     * @throws InstantiationException
     * @throws IllegalAccessException 
     */
    public Minions findMinion( String className ) throws ClassNotFoundException,InstantiationException,IllegalAccessException
    {
        if(dynamicallyFindClass)    //Views the boolean to decide if it should try and Dynamically find a class or not
        {
            Class clazz = Class.forName("dndminions." + className);
            Minions mini = (Minions) clazz.newInstance();
            return mini;
        }
        else
        {
            Minions[] classes = new Minions[]{new Zombi(),new Skele()};
            for (Minions classe : classes)
            {
                if (classe.name.equals(className))
                {
                    return classe;
                }
            }
            throw new ClassNotFoundException();
        }
    }
    /**
     * Clears out all of the tables and ArrayLists
     */
    public void clearAll()
    {
        cleanTable(MonsterList);
        cleanTable(MinionList);
        cleanTable(AttackList);
        list.clear();
        attackNotes.clear();
        numRepeatingAttackNotes.clear();
    }
    /**
     * Updates the variables for the current Sliders wizard Level and Proficiency bonus
     */
    public void updateLvAndProficiency()
    {
        wizlv=WizlvSlider.getValue();
        proficiency=ProficiencySlider.getValue();
    }
    /**
     * This method takes a row from a spreadsheet (which should equate to a Minion) and load it into the program
     * @param line A row of the spreadsheet
     * @throws ClassNotFoundException
     * @throws InstantiationException
     * @throws IllegalAccessException 
     */
    public void parseImportedData(String[] line) throws ClassNotFoundException, InstantiationException, IllegalAccessException
    {
        String putIn[];
        //NOW NEEDS TO BE ABLE TO FIND THAT 2ND PART OF SPREADSHEET, THE NAME, REFERENCES A CLASS AND THEN USE THAT TO GRAB ITS HP AND AC AND DEFAULT 0 FOR ATTACKING###########ClassNotFoundException
        Minions mini = findMinion(line[1]);
        System.out.println("        Did the general reference thing so as to extract the class name from string");
        mini.setUp(wizlv, proficiency, 0);
        System.out.println("        Set up the object to be completely set up");
        list.add(mini);
        putIn = new String[]{mini.getName(),"" + mini.getHp(), "" + mini.getAc(), "1" };
        System.out.println("        put the info into an array");
        updateMinionTableRow(putIn);
    }
}